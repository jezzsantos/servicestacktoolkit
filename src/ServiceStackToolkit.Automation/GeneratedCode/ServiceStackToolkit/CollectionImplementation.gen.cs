//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// The REST web services in the project
	/// </summary>
	[Description("The REST web services in the project")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "55c285d6-8bac-45a8-85dd-605beed51a26", ProxyType = typeof(Services))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Services : IServices
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IServices> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="Services"/> class.
		/// </summary>
		[ImportingConstructor]
		private Services() { }

		/// <summary>
		/// Creates a new instance of the <see cref="Services"/> class.
		/// </summary>
		public Services(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IServices>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IWebServices Parent
		{
			get { return this.target.Parent.As<IWebServices>(); }
		}

		/// <summary>
		/// Gets all instances of <see cref="IService"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IService> Service
		{ 
			get { return proxy.GetElements(() => this.Service, element => new Service(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IService"/>  and adds it to the <see cref="Service"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IService CreateService(string name, Action<IService> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IService>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.ICollection"/>) of this element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// Tests for the web service
	/// </summary>
	[Description("Tests for the web service")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "e0f60dd5-2d78-4c16-9780-e134ce626484", ProxyType = typeof(Tests))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Tests : ITests
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<ITests> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="Tests"/> class.
		/// </summary>
		[ImportingConstructor]
		private Tests() { }

		/// <summary>
		/// Creates a new instance of the <see cref="Tests"/> class.
		/// </summary>
		public Tests(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<ITests>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IWebServices Parent
		{
			get { return this.target.Parent.As<IWebServices>(); }
		}

		/// <summary>
		/// Gets the <see cref="IUnitTests"/> contained in this element.
		/// </summary>
		public virtual IUnitTests UnitTests
		{
			get { return proxy.GetElement(() => this.UnitTests, element => new UnitTests(element)); }
		}

		/// <summary>
		/// Gets the <see cref="IIntegrationTests"/> contained in this element.
		/// </summary>
		public virtual IIntegrationTests IntegrationTests
		{
			get { return proxy.GetElement(() => this.IntegrationTests, element => new IntegrationTests(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IUnitTests"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IUnitTests CreateUnitTests(string name, Action<IUnitTests> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IUnitTests>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Creates a new <see cref="IIntegrationTests"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IIntegrationTests CreateIntegrationTests(string name, Action<IIntegrationTests> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IIntegrationTests>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.ICollection"/>) of this element.
		/// </summary>
		public virtual Runtime.ICollection AsCollection()
		{
			return this.As<Runtime.ICollection>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}
