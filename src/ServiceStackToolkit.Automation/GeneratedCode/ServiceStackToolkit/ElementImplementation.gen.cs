//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// The web services project in the solution
	/// </summary>
	[Description("The web services project in the solution")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "37012148-5679-4bec-8299-e5ba271eac55", ProxyType = typeof(WebServices))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class WebServices : IWebServices
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IWebServices> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="WebServices"/> class.
		/// </summary>
		[ImportingConstructor]
		private WebServices() { }

		/// <summary>
		/// Creates a new instance of the <see cref="WebServices"/> class.
		/// </summary>
		public WebServices(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IWebServices>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The project in the solution that contains the web services
		/// </summary>
		[Description("The project in the solution that contains the web services")]
		[DisplayName("Services Project")]
		[Category("General")]
		public virtual String ServicesProject
		{
			get { return this.proxy.GetValue(() => this.ServicesProject); }
			set { this.proxy.SetValue(() => this.ServicesProject, value); }
		}

		/// <summary>
		/// The root namespace of the services project
		/// </summary>
		[Description("The root namespace of the services project")]
		[DisplayName("Root Namespace")]
		[Category("CodeGen")]
		public virtual String RootNamespace
		{
			get { return this.proxy.GetValue(() => this.RootNamespace); }
			set { this.proxy.SetValue(() => this.RootNamespace, value); }
		}

		/// <summary>
		/// The display name of the service.
		/// </summary>
		[Description("The display name of the service.")]
		[DisplayName("Service Display Name")]
		[Category("General")]
		public virtual String ServiceDisplayName
		{
			get { return this.proxy.GetValue(() => this.ServiceDisplayName); }
			set { this.proxy.SetValue(() => this.ServiceDisplayName, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IDefaultView Parent
		{
			get { return this.target.Parent.As<IDefaultView>(); }
		}

		/// <summary>
		/// Gets the <see cref="IServices"/> contained in this element.
		/// </summary>
		public virtual IServices Services
		{
			get { return proxy.GetElement(() => this.Services, element => new Services(element)); }
		}

		/// <summary>
		/// Gets the <see cref="ITests"/> contained in this element.
		/// </summary>
		public virtual ITests Tests
		{
			get { return proxy.GetElement(() => this.Tests, element => new Tests(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IServices"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IServices CreateServices(string name, Action<IServices> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<IServices>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Creates a new <see cref="ITests"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual ITests CreateTests(string name, Action<ITests> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateCollection<ITests>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// A REST service in the project
	/// </summary>
	[Description("A REST service in the project")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "49ed2bfc-3fc4-4595-8241-8ce44203e52a", ProxyType = typeof(Service))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Service : IService
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IService> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="Service"/> class.
		/// </summary>
		[ImportingConstructor]
		private Service() { }

		/// <summary>
		/// Creates a new instance of the <see cref="Service"/> class.
		/// </summary>
		public Service(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IService>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The REST resource name (plural)
		/// </summary>
		[Description("The REST resource name (plural)")]
		[DisplayName("Resource Name")]
		[Category("RESTful")]
		public virtual String ResourceName
		{
			get { return this.proxy.GetValue(() => this.ResourceName); }
			set { this.proxy.SetValue(() => this.ResourceName, value); }
		}

		/// <summary>
		/// The REST resource name (singular)
		/// </summary>
		[Description("The REST resource name (singular)")]
		[DisplayName("Resource Name (Singular)")]
		[Category("General")]
		public virtual String ResourceNameSingular
		{
			get { return this.proxy.GetValue(() => this.ResourceNameSingular); }
			set { this.proxy.SetValue(() => this.ResourceNameSingular, value); }
		}

		/// <summary>
		/// The REST resource name (plural)
		/// </summary>
		[Description("The REST resource name (plural)")]
		[DisplayName("Resource Name (Plural)")]
		[Category("General")]
		public virtual String ResourceNamePlural
		{
			get { return this.proxy.GetValue(() => this.ResourceNamePlural); }
			set { this.proxy.SetValue(() => this.ResourceNamePlural, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IServices Parent
		{
			get { return this.target.Parent.As<IServices>(); }
		}

		/// <summary>
		/// Gets all instances of <see cref="IVerb"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IVerb> Verbs
		{ 
			get { return proxy.GetElements(() => this.Verbs, element => new Verb(element)); }
		}

		/// <summary>
		/// Gets the <see cref="IResource"/> contained in this element.
		/// </summary>
		public virtual IResource Resource
		{
			get { return proxy.GetElement(() => this.Resource, element => new Resource(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IVerb"/>  and adds it to the <see cref="Verbs"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IVerb CreateVerb(string name, Action<IVerb> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IVerb>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Creates a new <see cref="IResource"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IResource CreateResource(string name, Action<IResource> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IResource>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::ServiceStackToolkit.Automation.TypeConverters;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// A HTTP verb
	/// </summary>
	[Description("A HTTP verb")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "39264c19-8dfa-480d-88a3-376e18f316d1", ProxyType = typeof(Verb))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Verb : IVerb
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IVerb> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="Verb"/> class.
		/// </summary>
		[ImportingConstructor]
		private Verb() { }

		/// <summary>
		/// Creates a new instance of the <see cref="Verb"/> class.
		/// </summary>
		public Verb(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IVerb>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The type of the verb (i.e. GET, POST, PUT or DELETE)
		/// </summary>
		[Description("The type of the verb (i.e. GET, POST, PUT or DELETE)")]
		[DisplayName("Verb Type")]
		[Category("RESTful")]
		[TypeConverter(typeof(HttpVerbEnumConverter))]
		public virtual String VerbType
		{
			get { return this.proxy.GetValue(() => this.VerbType); }
			set { this.proxy.SetValue(() => this.VerbType, value); }
		}

		/// <summary>
		/// The REST route for the verb
		/// </summary>
		[Description("The REST route for the verb")]
		[DisplayName("Route")]
		[Category("RESTful")]
		public virtual String Route
		{
			get { return this.proxy.GetValue(() => this.Route); }
			set { this.proxy.SetValue(() => this.Route, value); }
		}

		/// <summary>
		/// Whether the request must be authorized
		/// </summary>
		[Description("Whether the request must be authorized")]
		[DisplayName("Is Authorized")]
		[Category("Security")]
		public virtual Boolean IsAuthorized
		{
			get { return this.proxy.GetValue(() => this.IsAuthorized); }
			set { this.proxy.SetValue(() => this.IsAuthorized, value); }
		}

		/// <summary>
		/// Whether or not this verb handles multiple resources
		/// </summary>
		[Description("Whether or not this verb handles multiple resources")]
		[DisplayName("Has Many")]
		[Category("Design")]
		public virtual Boolean HasMany
		{
			get { return this.proxy.GetValue(() => this.HasMany); }
			set { this.proxy.SetValue(() => this.HasMany, value); }
		}

		/// <summary>
		/// The name of the resource for this verb
		/// </summary>
		[Description("The name of the resource for this verb")]
		[DisplayName("Verb Resource Name")]
		[Category("Design")]
		public virtual String VerbResourceName
		{
			get { return this.proxy.GetValue(() => this.VerbResourceName); }
			set { this.proxy.SetValue(() => this.VerbResourceName, value); }
		}

		/// <summary>
		/// Whether this verb is for testing only (DEBUG=True)
		/// </summary>
		[Description("Whether this verb is for testing only (DEBUG=True)")]
		[DisplayName("Is Testing Only")]
		[Category("CodeGen")]
		public virtual Boolean IsTestingOnly
		{
			get { return this.proxy.GetValue(() => this.IsTestingOnly); }
			set { this.proxy.SetValue(() => this.IsTestingOnly, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IService Parent
		{
			get { return this.target.Parent.As<IService>(); }
		}

		/// <summary>
		/// Gets the <see cref="IResponseContract"/> contained in this element.
		/// </summary>
		public virtual IResponseContract ResponseContract
		{
			get { return proxy.GetElement(() => this.ResponseContract, element => new ResponseContract(element)); }
		}

		/// <summary>
		/// Gets the <see cref="IRequestContract"/> contained in this element.
		/// </summary>
		public virtual IRequestContract RequestContract
		{
			get { return proxy.GetElement(() => this.RequestContract, element => new RequestContract(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IResponseContract"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IResponseContract CreateResponseContract(string name, Action<IResponseContract> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IResponseContract>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Creates a new <see cref="IRequestContract"/>  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IRequestContract CreateRequestContract(string name, Action<IRequestContract> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IRequestContract>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// The contract of the response
	/// </summary>
	[Description("The contract of the response")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "b3174220-650b-47b0-8826-bad69eb4fd8a", ProxyType = typeof(ResponseContract))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ResponseContract : IResponseContract
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IResponseContract> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="ResponseContract"/> class.
		/// </summary>
		[ImportingConstructor]
		private ResponseContract() { }

		/// <summary>
		/// Creates a new instance of the <see cref="ResponseContract"/> class.
		/// </summary>
		public ResponseContract(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IResponseContract>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The name of the class for the contract
		/// </summary>
		[Description("The name of the class for the contract")]
		[DisplayName("Contract Name")]
		[Category("CodeGen")]
		public virtual String ContractName
		{
			get { return this.proxy.GetValue(() => this.ContractName); }
			set { this.proxy.SetValue(() => this.ContractName, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IVerb Parent
		{
			get { return this.target.Parent.As<IVerb>(); }
		}

		/// <summary>
		/// Gets all instances of <see cref="IResponseField"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IResponseField> ResponseFields
		{ 
			get { return proxy.GetElements(() => this.ResponseFields, element => new ResponseField(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IResponseField"/>  and adds it to the <see cref="ResponseFields"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IResponseField CreateResponseField(string name, Action<IResponseField> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IResponseField>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::ServiceStackToolkit.Automation.TypeEditors;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// A field to be returned in the response
	/// </summary>
	[Description("A field to be returned in the response")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "eccdd0e4-490d-4082-9f54-ec3a3246e0e0", ProxyType = typeof(ResponseField))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ResponseField : IResponseField
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IResponseField> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="ResponseField"/> class.
		/// </summary>
		[ImportingConstructor]
		private ResponseField() { }

		/// <summary>
		/// Creates a new instance of the <see cref="ResponseField"/> class.
		/// </summary>
		public ResponseField(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IResponseField>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The data type of the field
		/// </summary>
		[Description("The data type of the field")]
		[DisplayName("Data Type")]
		[Category("CodeGen")]
		[Editor(typeof(AnyDataTypePicker), typeof(UITypeEditor))]
		public virtual String DataType
		{
			get { return this.proxy.GetValue(() => this.DataType); }
			set { this.proxy.SetValue(() => this.DataType, value); }
		}

		/// <summary>
		/// Optional. The name of the field as it is serialized in the response.
		/// </summary>
		[Description("Optional. The name of the field as it is serialized in the response.")]
		[DisplayName("Serialized Name")]
		[Category("RESTful")]
		public virtual String SerializedName
		{
			get { return this.proxy.GetValue(() => this.SerializedName); }
			set { this.proxy.SetValue(() => this.SerializedName, value); }
		}

		/// <summary>
		/// The description of the field.
		/// </summary>
		[Description("The description of the field.")]
		[DisplayName("Description")]
		[Category("CodeGen")]
		public virtual String Description
		{
			get { return this.proxy.GetValue(() => this.Description); }
			set { this.proxy.SetValue(() => this.Description, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IResponseContract Parent
		{
			get { return this.target.Parent.As<IResponseContract>(); }
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// The contract of the request
	/// </summary>
	[Description("The contract of the request")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "91261008-3004-4244-bed7-321a33aefa75", ProxyType = typeof(RequestContract))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class RequestContract : IRequestContract
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IRequestContract> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="RequestContract"/> class.
		/// </summary>
		[ImportingConstructor]
		private RequestContract() { }

		/// <summary>
		/// Creates a new instance of the <see cref="RequestContract"/> class.
		/// </summary>
		public RequestContract(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IRequestContract>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The name of the class for the contract
		/// </summary>
		[Description("The name of the class for the contract")]
		[DisplayName("Contract Name")]
		[Category("CodeGen")]
		public virtual String ContractName
		{
			get { return this.proxy.GetValue(() => this.ContractName); }
			set { this.proxy.SetValue(() => this.ContractName, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IVerb Parent
		{
			get { return this.target.Parent.As<IVerb>(); }
		}

		/// <summary>
		/// Gets all instances of <see cref="IRequestField"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IRequestField> RequestFields
		{ 
			get { return proxy.GetElements(() => this.RequestFields, element => new RequestField(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IRequestField"/>  and adds it to the <see cref="RequestFields"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IRequestField CreateRequestField(string name, Action<IRequestField> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IRequestField>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// A field to be provided in the request
	/// </summary>
	[Description("A field to be provided in the request")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "47787b3d-2e27-4cf2-bc9f-f3c9c7bb1f35", ProxyType = typeof(RequestField))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class RequestField : IRequestField
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IRequestField> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="RequestField"/> class.
		/// </summary>
		[ImportingConstructor]
		private RequestField() { }

		/// <summary>
		/// Creates a new instance of the <see cref="RequestField"/> class.
		/// </summary>
		public RequestField(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IRequestField>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// Whether a value for the field is required in request validation.
		/// </summary>
		[Description("Whether a value for the field is required in request validation.")]
		[DisplayName("Is Required")]
		[Category("Validation")]
		public virtual Boolean IsRequired
		{
			get { return this.proxy.GetValue(() => this.IsRequired); }
			set { this.proxy.SetValue(() => this.IsRequired, value); }
		}

		/// <summary>
		/// The data type of the field
		/// </summary>
		[Description("The data type of the field")]
		[DisplayName("Data Type")]
		[Category("CodeGen")]
		public virtual String DataType
		{
			get { return this.proxy.GetValue(() => this.DataType); }
			set { this.proxy.SetValue(() => this.DataType, value); }
		}

		/// <summary>
		/// Whether this field is included in the 'Route' for this verb.
		/// </summary>
		[Description("Whether this field is included in the 'Route' for this verb.")]
		[DisplayName("Is In Route")]
		[Category("RESTful")]
		public virtual Boolean IsInRoute
		{
			get { return this.proxy.GetValue(() => this.IsInRoute); }
			set { this.proxy.SetValue(() => this.IsInRoute, value); }
		}

		/// <summary>
		/// Optional. The name of the field as it is serialized in the request.
		/// </summary>
		[Description("Optional. The name of the field as it is serialized in the request.")]
		[DisplayName("Serialized Name")]
		[Category("RESTful")]
		public virtual String SerializedName
		{
			get { return this.proxy.GetValue(() => this.SerializedName); }
			set { this.proxy.SetValue(() => this.SerializedName, value); }
		}

		/// <summary>
		/// The description of the field.
		/// </summary>
		[Description("The description of the field.")]
		[DisplayName("Description")]
		[Category("CodeGen")]
		public virtual String Description
		{
			get { return this.proxy.GetValue(() => this.Description); }
			set { this.proxy.SetValue(() => this.Description, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IRequestContract Parent
		{
			get { return this.target.Parent.As<IRequestContract>(); }
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// The resource being provided by the service
	/// </summary>
	[Description("The resource being provided by the service")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "230b6fc3-2cdc-43a4-a8b4-ce6ff7379bff", ProxyType = typeof(Resource))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class Resource : IResource
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IResource> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="Resource"/> class.
		/// </summary>
		[ImportingConstructor]
		private Resource() { }

		/// <summary>
		/// Creates a new instance of the <see cref="Resource"/> class.
		/// </summary>
		public Resource(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IResource>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The name of the resource
		/// </summary>
		[Description("The name of the resource")]
		[DisplayName("Resource Name")]
		[Category("RESTful")]
		public virtual String ResourceName
		{
			get { return this.proxy.GetValue(() => this.ResourceName); }
			set { this.proxy.SetValue(() => this.ResourceName, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IService Parent
		{
			get { return this.target.Parent.As<IService>(); }
		}

		/// <summary>
		/// Gets all instances of <see cref="IResourceField"/> contained in this element.
		/// </summary>
		public virtual IEnumerable<IResourceField> ResourceFields
		{ 
			get { return proxy.GetElements(() => this.ResourceFields, element => new ResourceField(element)); }
		}

		/// <summary>
		/// Creates a new <see cref="IResourceField"/>  and adds it to the <see cref="ResourceFields"/> collection,  
		/// executing the optional <paramref name="initializer"/> if not <see langword="null"/>.
		/// </summary>
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1026:DefaultParametersShouldNotBeUsed")]
		public virtual IResourceField CreateResourceField(string name, Action<IResourceField> initializer = null, bool raiseInstantiateEvents = true)
		{
			return proxy.CreateElement<IResourceField>(name, initializer, raiseInstantiateEvents);
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::ServiceStackToolkit.Automation.TypeEditors;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// A field of the resource
	/// </summary>
	[Description("A field of the resource")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "fdfa1641-a89c-4719-826f-11f6cd5a53a4", ProxyType = typeof(ResourceField))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class ResourceField : IResourceField
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IResourceField> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="ResourceField"/> class.
		/// </summary>
		[ImportingConstructor]
		private ResourceField() { }

		/// <summary>
		/// Creates a new instance of the <see cref="ResourceField"/> class.
		/// </summary>
		public ResourceField(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IResourceField>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The data type of the field
		/// </summary>
		[Description("The data type of the field")]
		[DisplayName("Data Type")]
		[Category("CodeGen")]
		[Editor(typeof(AnyDataTypePicker), typeof(UITypeEditor))]
		public virtual String DataType
		{
			get { return this.proxy.GetValue(() => this.DataType); }
			set { this.proxy.SetValue(() => this.DataType, value); }
		}

		/// <summary>
		/// The description of the field.
		/// </summary>
		[Description("The description of the field.")]
		[DisplayName("Description")]
		[Category("CodeGen")]
		public virtual String Description
		{
			get { return this.proxy.GetValue(() => this.Description); }
			set { this.proxy.SetValue(() => this.Description, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual IResource Parent
		{
			get { return this.target.Parent.As<IResource>(); }
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// Unit tests for the web service
	/// </summary>
	[Description("Unit tests for the web service")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "f04997c2-ad43-4e17-a78f-e34267c9f5dc", ProxyType = typeof(UnitTests))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class UnitTests : IUnitTests
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IUnitTests> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="UnitTests"/> class.
		/// </summary>
		[ImportingConstructor]
		private UnitTests() { }

		/// <summary>
		/// Creates a new instance of the <see cref="UnitTests"/> class.
		/// </summary>
		public UnitTests(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IUnitTests>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The project in the solution that contains the tests
		/// </summary>
		[Description("The project in the solution that contains the tests")]
		[DisplayName("Test Project")]
		[Category("General")]
		public virtual String TestProject
		{
			get { return this.proxy.GetValue(() => this.TestProject); }
			set { this.proxy.SetValue(() => this.TestProject, value); }
		}

		/// <summary>
		/// The root namespace of the services project
		/// </summary>
		[Description("The root namespace of the services project")]
		[DisplayName("Root Namespace")]
		[Category("CodeGen")]
		public virtual String RootNamespace
		{
			get { return this.proxy.GetValue(() => this.RootNamespace); }
			set { this.proxy.SetValue(() => this.RootNamespace, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual ITests Parent
		{
			get { return this.target.Parent.As<ITests>(); }
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}

namespace ServiceStackToolkit
{
	using global::NuPattern.Runtime;
	using global::NuPattern.Runtime.Bindings;
	using global::NuPattern.Runtime.ToolkitInterface;
	using global::System;
	using global::System.Collections.Generic;
	using global::System.ComponentModel;
	using global::System.ComponentModel.Composition;
	using global::System.ComponentModel.Design;
	using global::System.Drawing.Design;
	using Runtime = global::NuPattern.Runtime;

	/// <summary>
	/// Integration tests for the web service
	/// </summary>
	[Description("Integration tests for the web service")]
	[ToolkitInterfaceProxy(ExtensionId = "B4A8F72C-332B-4154-9351-F7049C24567D", DefinitionId = "edfbc554-33cc-4e05-996b-3ae14a5ff773", ProxyType = typeof(IntegrationTests))]
	[System.CodeDom.Compiler.GeneratedCode("NuPattern Toolkit Library", "1.4.24.0")]
	[System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
	internal partial class IntegrationTests : IIntegrationTests
	{

		private Runtime.IAbstractElement target;
		private IAbstractElementProxy<IIntegrationTests> proxy;

		/// <summary>
		/// Creates a new instance of the <see cref="IntegrationTests"/> class.
		/// </summary>
		[ImportingConstructor]
		private IntegrationTests() { }

		/// <summary>
		/// Creates a new instance of the <see cref="IntegrationTests"/> class.
		/// </summary>
		public IntegrationTests(Runtime.IAbstractElement target)
		{
			this.target = target;
			this.proxy = target.ProxyFor<IIntegrationTests>();
			OnCreated();
		}

		/// <summary>
		/// When overridden, initializes the class.
		/// </summary>
		partial void OnCreated();

		/// <summary>
		/// The project in the solution that contains the tests
		/// </summary>
		[Description("The project in the solution that contains the tests")]
		[DisplayName("Test Project")]
		[Category("General")]
		public virtual String TestProject
		{
			get { return this.proxy.GetValue(() => this.TestProject); }
			set { this.proxy.SetValue(() => this.TestProject, value); }
		}

		/// <summary>
		/// The root namespace of the services project
		/// </summary>
		[Description("The root namespace of the services project")]
		[DisplayName("Root Namespace")]
		[Category("CodeGen")]
		public virtual String RootNamespace
		{
			get { return this.proxy.GetValue(() => this.RootNamespace); }
			set { this.proxy.SetValue(() => this.RootNamespace, value); }
		}

		/// <summary>
		/// The name of this element instance.
		/// </summary>
		[Description("The name of this element instance.")]
		[ParenthesizePropertyName(true)]
		public virtual String InstanceName
		{ 
			get { return this.proxy.GetValue(() => this.InstanceName); }
			set { this.proxy.SetValue(() => this.InstanceName, value); }
		}

		/// <summary>
		/// The order of this element relative to its siblings.
		/// </summary>
		[Description("The order of this element relative to its siblings.")]
		[ReadOnly(true)]
		public virtual Double InstanceOrder
		{ 
			get { return this.proxy.GetValue(() => this.InstanceOrder); }
			set { this.proxy.SetValue(() => this.InstanceOrder, value); }
		}

		/// <summary>
		/// The references of this element.
		/// </summary>
		[Description("The references of this element.")]
		public virtual IEnumerable<IReference> References
		{ 
			get { return this.proxy.GetValue(() => this.References); }
		}

		/// <summary>
		/// Notes for this element.
		/// </summary>
		[Description("Notes for this element.")]
		[Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
		public virtual String Notes
		{ 
			get { return this.proxy.GetValue(() => this.Notes); }
			set { this.proxy.SetValue(() => this.Notes, value); }
		}

		/// <summary>
		/// Gets or sets the InTransaction property.
		/// </summary>
		public virtual Boolean InTransaction
		{ 
			get { return this.proxy.GetValue(() => this.InTransaction); }
		}

		/// <summary>
		/// Gets or sets the IsSerializing property.
		/// </summary>
		public virtual Boolean IsSerializing
		{ 
			get { return this.proxy.GetValue(() => this.IsSerializing); }
		}

		/// <summary>
		/// Gets the parent element.
		/// </summary>
		public virtual ITests Parent
		{
			get { return this.target.Parent.As<ITests>(); }
		}

		/// <summary>
		/// Deletes this element.
		/// </summary>
		public virtual void Delete()
		{
			this.target.Delete();
		}

		/// <summary>
		/// Gets the generalized interface (<see cref="Runtime.IElement"/>) of this element.
		/// </summary>
		public virtual Runtime.IElement AsElement()
		{
			return this.As<Runtime.IElement>();
		}

		/// <summary>
		/// Gets the specified generalized interface of this element, if possible.
		/// </summary>
		public virtual TGeneralizedInterface As<TGeneralizedInterface>() where TGeneralizedInterface : class
		{
			return this.target as TGeneralizedInterface;
		}
	}
}
