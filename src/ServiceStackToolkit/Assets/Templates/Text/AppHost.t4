<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="ServiceStackToolkit.Automation" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var webServices = currentElement.As<IWebServices>();
    var rootnamespace = webServices.RootNamespace;
    var serviceDisplayName = (!string.IsNullOrEmpty(webServices.ServiceDisplayName)) ? webServices.ServiceDisplayName : webServices.InstanceName;
    var managerClassNameSuffix = "Manager";
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using <#= rootnamespace #>.DataContracts;
using <#= rootnamespace #>.Workflow;
using Funq;
using ServiceStack;
using ServiceStack.Configuration;
using ServiceStack.FluentValidation;
using ServiceStack.Validation;

namespace <#= rootnamespace #>
{
    /// <summary>
    /// A host environment for all web services of this project.
    /// </summary>
    internal partial class AppHost : <#= rootnamespace #>.AppHostBase {}

    internal abstract class AppHostBase : ServiceStack.AppHostBase
    {
        private const string ServiceDisplayName = "<#= serviceDisplayName#>";

        /// <summary>
        /// Creates a new instance of the <see ref="AppHostBase" /> class.
        /// </summary>
        public AppHostBase()
            : base(ServiceDisplayName, typeof(AppHost).Assembly)
        {
        }

        /// <summary>
        /// Configures the service host environment
        /// </summary>
        public override void Configure(Container container)
        {
            // Add plug-ins
            Plugins.Add(new ValidationFeature());

#if DEBUG
            SetConfig(new HostConfig { DebugMode = true });
#endif
            // Auto wire-up any validators (those derived from <see cref="AbstractValidator{T}"/>)
            container.RegisterValidators(typeof(AppHost).Assembly);
            RegisterValidators(container);

            // Register generated classes
            RegisterWorkflowManagers(container);

            RegisterCustomTypes(container);
        }

        /// <summary>
        /// Registers any custom validator types (that are not derived from <see cref="AbstractValidator{T}"/>)
        /// </summary>
        protected virtual void RegisterValidators(Container container)
        {
        }

        /// <summary>
        /// Registers all workflow manager types
        /// </summary>
        protected virtual void RegisterWorkflowManagers(Container container)
        {
<#
foreach (var service in webServices.Services.Service)
{
    var managerClassName = service.ResourceNamePlural + managerClassNameSuffix;
#>
            container.Register<I<#= managerClassName #>>(x => new <#= managerClassName #>());
<#
}
#>
        }

        /// <summary>
        /// Registers all other dependency injected types
        /// </summary>
        protected virtual void RegisterCustomTypes(Container container)
        {
        }
    }
}