<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var requestContract = currentElement.As<IRequestContract>();
    var responseContract = requestContract.Parent.ResponseContract;
    var verb = requestContract.Parent;
    var service = verb.Parent;
    var rootnamespace = requestContract.Parent.Parent.Parent.Parent.RootNamespace;
    var commonServicesNamespace = "MySolution.Services";
    var hasCustomSerialization = (requestContract.RequestFields.Any(rf => !string.IsNullOrEmpty(rf.SerializedName)));
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Linq;
using System.Collections.Generic;
<#
if (hasCustomSerialization)
{
#>
using System.Runtime.Serialization;
<#
}
#>
using ServiceStack;
using <#= commonServicesNamespace #>.Security;

namespace <#= rootnamespace #>.MessageContracts
{
<#
if (verb.IsTestingOnly)
{
#>
#if DEBUG
<#
}
#>
    /// <summary>
    /// Defines the <#= verb.InstanceName #> request for the '<#= service.ResourceNamePlural #>' resource.
    /// </summary>
<#
if (verb.IsAuthorized)
{
#>
    [RequireAuthorization]
<#
}
if (hasCustomSerialization)
{
#>
    [DataContract]
<#
}
#>
    [Route("<#= verb.Route #>", "<#= verb.VerbType #>")]
    public partial class <#= requestContract.ContractName #> : IReturn<<#= responseContract.ContractName #>>
    {
<#
if (requestContract.RequestFields.Any())
{
    foreach (var field in requestContract.RequestFields)
    {
        var description = ((!string.IsNullOrEmpty(field.Description)) ? field.Description : "the " + field.InstanceName).ToLowerInvariant();
#>
        /// <summary>
        /// Gets or sets <#= description #>
        /// </summary>
<#
        if (hasCustomSerialization)
        {
            if (!string.IsNullOrEmpty(field.SerializedName))
            {
#>
        [DataMember(Name = "<#= field.SerializedName #>")]
<#
            }
            else
            {
#>
        [DataMember]
<#
            }
        }
#>
        public <#= field.DataType #> <#= field.InstanceName #> {get; set; }

<#
    }
}
#>
    }
<#
if (verb.IsTestingOnly)
{
#>
#endif
<#
}
#>
}