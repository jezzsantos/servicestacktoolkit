<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var requestContract = currentElement.As<IRequestContract>();
    var rootnamespace = requestContract.Parent.Parent.Parent.Parent.RootNamespace;
    var verb = requestContract.Parent;
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using ServiceStack.FluentValidation;
using <#= rootnamespace #>.MessageContracts;

namespace <#= rootnamespace #>.Validators
{
<#
if (verb.IsTestingOnly)
{
#>
#if DEBUG
<#
}
#>
    /// <summary>
    /// A validator that validates the <see cref="<#= requestContract.ContractName #>"/> contract.
    /// </summary>
    internal partial class <#= requestContract.ContractName #>Validator : AbstractValidator<<#= requestContract.ContractName #>>
    {
        /// <summary>
        /// Creates a new instance of the <see cref="<#= requestContract.ContractName #>Validator"/> class.
        /// </summary>
        public <#= requestContract.ContractName #>Validator()
        {
<#
if (requestContract.RequestFields.Any())
{
#>
            // Rules defined by request contract
<#
    foreach (var field in requestContract.RequestFields)
    {
        if (field.IsRequired)
        {
            if (field.IsInRoute)
            {
#>
            RuleFor(dto => dto.<#= field.InstanceName #>).NotEmpty();
<#
            }
            else
            {
#>
            RuleFor(dto => dto.<#= field.InstanceName #>).NotNull();
<#
            }
        }
    }
}
#>

            // Additional custom rules
            this.AddRules();
        }

        /// <summary>
        /// Adds custom rules for the validator
        /// </summary>
        partial void AddRules();
    }
<#
if (verb.IsTestingOnly)
{
#>
#endif
<#
}
#>
}