<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="ServiceStackToolkit.Automation" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Net" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var service = currentElement.As<IService>();
    var serviceNameSingular = service.ResourceNameSingular;
    var serviceNamePlural = service.ResourceNamePlural;
    var rootnamespace = service.Parent.Parent.RootNamespace;

    var managerClassName = serviceNamePlural + "Manager";
    var managerMemberName = serviceNamePlural.ToLowerInvariant() + "Manager";
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Net;
using <#= rootnamespace #>.MessageContracts;
using <#= rootnamespace #>.Workflow;

namespace <#= rootnamespace #>.Services
{
    /// <summary>
    /// Provides the service endpoint for exposing the '<#= serviceNamePlural #>' resource.
    /// </summary>
    internal partial class <#= serviceNamePlural #> : ServiceBase, I<#= serviceNamePlural #>
    {
        private I<#= managerClassName #> <#= managerMemberName #>;

        /// <summary>
        /// Creates a new instance of the <see cref="<#= serviceNamePlural #>" /> class.
        /// </summary>
        /// <remarks>This ctor is automatically called by the ServiceStack IoC on start</remarks>
        public <#= serviceNamePlural #>(I<#= managerClassName #> <#= managerMemberName #>)
        {
            Guard.NotNull(() => <#= managerMemberName #>, <#= managerMemberName #>);

            this.<#= managerMemberName #> = <#= managerMemberName #>;
        }

<#
foreach (var verb in service.Verbs)
{
#>
<#
    if (verb.IsTestingOnly)
    {
#>
#if DEBUG
<#
    }
#>
        /// <summary>
        /// Provides the <#= verb.InstanceName #> request for the '<#= serviceNamePlural #>' resource.
        /// </summary>
        public <#= verb.ResponseContract.ContractName #> <#= TextFormatting.TitleCase(verb.VerbType) #> (<#= verb.RequestContract.ContractName #> body)
        {
<#
        var statusCode = HttpStatusCode.OK; 
        switch (verb.VerbType)
        {
            case "GET":
                statusCode = HttpStatusCode.OK;
                break;

            case "POST":
                statusCode = HttpStatusCode.Created;
                break;

            case "PUT":
            case "DELETE":
                statusCode = HttpStatusCode.Accepted;
                break;
        }
#>
            try
            {
                Guard.NotNull(() => body, body);

                var response = this.<#= managerMemberName #>.<#= verb.InstanceName #><#= verb.VerbResourceName #>(this.Request, body);
                if (response == null)
                {
                    throw new NotSupportedException();
                }

                this.SetResponseCode(HttpStatusCode.<#= statusCode #>);

                return response;
            }
            catch (ArgumentException ex)
            {
                throw HttpErrorThrower.BadRequest(ex.Message);
            }
            catch (ResourceNotFoundException ex)
            {
                throw HttpErrorThrower.NotFound(ex.Message);
            }
            catch (ResourceConflictException ex)
            {
                throw HttpErrorThrower.Conflict(ex.Message);
            }
            catch (RuleViolationException ex)
            {
                throw HttpErrorThrower.BadRequest(ex.Message);
            }
            catch (Exception)
            {
                // Block this exception from being emitted
                throw HttpErrorThrower.InternalServerError();
            }
        }

<#
    if (verb.IsTestingOnly)
    {
#>
#endif
<#
    }
#>
<#
}
#>
    }
}