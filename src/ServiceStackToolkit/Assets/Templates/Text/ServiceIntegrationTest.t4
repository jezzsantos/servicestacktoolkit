<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="ServiceStackToolkit.Automation" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var service = currentElement.As<IService>();
    var serviceNameSingular = service.ResourceNameSingular;
    var serviceNamePlural = service.ResourceNamePlural;
    var codeRootnamespace = service.Parent.Parent.RootNamespace;
    var testRootnamespace = service.Parent.Parent.Tests.IntegrationTests.RootNamespace;
    var identityFieldName = "Id";
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ServiceStack;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using <#= codeRootnamespace #>.MessageContracts;
using <#= codeRootnamespace #>.Services;
using <#= codeRootnamespace #>.Workflow;

namespace <#= testRootnamespace #>.Services
{
    /// <summary>
    /// Tests the <see cref="<#= serviceNamePlural #>"/> service interface class.
    /// </summary>
    /// <remarks>
    /// These tests are verifying basic service connectivity, things like:
    /// 1. Request validation
    /// 2. Basic request and responses.
    /// 3. Handling of exceptions from service.
    /// 4. Returning correct HTTP response codes.
    /// </remarks>
    public partial class <#= serviceNamePlural #>Spec
    {
        private static readonly IAssertion Assert = new Assertion();
        private const string RestRoutedNotFoundPartialMessage = "None of the given rest routes matches";

        [TestClass]
        public partial class GivenTheService : GivenTheServiceBase { }

        public abstract class GivenTheServiceBase : AzureIntegrationTest
        {
            [TestInitialize]
            public virtual void InitalizeContext()
            {
                base.InitializeContext();
            }

<#
foreach (var verb in service.Verbs)
{
#>
<#
    if (verb.IsTestingOnly)
    {
#>
#if DEBUG
<#
    }
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithNullRequest_ThenThrowsNullReference()
            {
                Assert.Throws<NullReferenceException>(() =>
                    Client.<#= TextFormatting.TitleCase(verb.VerbType) #>((<#= verb.RequestContract.ContractName #>)null));
            }

<# 
        if ((verb.VerbType == "GET" && !verb.HasMany) || verb.VerbType == "PUT" || verb.VerbType == "DELETE")
        {
            var routedFields = verb.RequestContract.RequestFields.Where(rf => rf.IsInRoute);
            var hasRoutedFields = routedFields.Any();
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithEmptyRequest_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>()));
            }
<#
            foreach (var routedField in routedFields)
            {
                var isIdentityField = routedField.InstanceName.Equals(identityFieldName, StringComparison.OrdinalIgnoreCase);
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithNull<#= routedField.InstanceName #>_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(this.Make<#= verb.RequestContract.ContractName #>(new Dictionary<string, string>() { { "<#= routedField.InstanceName #>", null } })));
            }

<#
                if (isIdentityField)
                {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithEmpty<#= routedField.InstanceName #>_ThenRedirectsToReturnAllResources()
            {
                var httpResponse = Client.<#= TextFormatting.TitleCase(verb.VerbType) #><HttpWebResponse>(this.Make<#= verb.RequestContract.ContractName #>(new Dictionary<string, string>() { { "<#= routedField.InstanceName #>", string.Empty } }));

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

<#
                }
                else
                {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithEmpty<#= routedField.InstanceName #>_ThenThrowsVerbNotFound()
            {
                Assert.Throws<WebServiceException>(HttpErrorCode.ResourceNotFound, () =>
                    Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(this.Make<#= verb.RequestContract.ContractName #>(new Dictionary<string, string>() { { "<#= routedField.InstanceName #>", string.Empty } })));
            }

<#
                }
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithUnknown<#= routedField.InstanceName #>_ThenThrowsResourceNotFound()
            {
                Assert.Throws<WebServiceException>(HttpErrorCode.ResourceNotFound, () =>
                    Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(this.Make<#= verb.RequestContract.ContractName #>(new Dictionary<string, string>() { { "<#= routedField.InstanceName #>", this.MakeUnknownId() } })));
            }
<#
            }
#>

<#
        }
#>
<# 
        if (verb.VerbType == "GET")
        {
            if (!verb.HasMany)
            {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>_ThenReturnsResource()
            {
                var created = this.CreateNew<#= serviceNameSingular #>();
                var fetched = Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #> { Id = created });

                Assert.Equal(created, fetched.<#= serviceNameSingular #>.Id);

                var httpResponse = Client.<#= TextFormatting.TitleCase(verb.VerbType) #><HttpWebResponse>(new <#= verb.RequestContract.ContractName #> { Id = created });

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

<#
            }
            else
            {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithNo<#= serviceNamePlural #>_ThenReturnsNoResource()
            {
                var result = Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(this.Make<#= verb.RequestContract.ContractName #>());

                Assert.Equal(0, result.<#= serviceNamePlural #>.Count());

                var httpResponse = Client.<#= TextFormatting.TitleCase(verb.VerbType) #><HttpWebResponse>(this.Make<#= verb.RequestContract.ContractName #>());

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithMultiple<#= serviceNamePlural #>_ThenReturnsAllResources()
            {
                var created1 = this.CreateNew<#= serviceNameSingular #>();
                var created2 = this.CreateNew<#= serviceNameSingular #>();
                var created3 = this.CreateNew<#= serviceNameSingular #>();

                var result = Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(this.Make<#= verb.RequestContract.ContractName #>());

                Assert.Equal(3, result.<#= serviceNamePlural #>.Count());
                Assert.NotNull(result.<#= serviceNamePlural #>.FirstOrDefault(x => x.Id == created1));
                Assert.NotNull(result.<#= serviceNamePlural #>.FirstOrDefault(x => x.Id == created2));
                Assert.NotNull(result.<#= serviceNamePlural #>.FirstOrDefault(x => x.Id == created3));

                var httpResponse = Client.<#= TextFormatting.TitleCase(verb.VerbType) #><HttpWebResponse>(this.Make<#= verb.RequestContract.ContractName #>());

                Assert.Equal(HttpStatusCode.OK, httpResponse.StatusCode);
            }

<#
            }
        }
        else if (verb.VerbType == "POST")
        {
            var routedFields = verb.RequestContract.RequestFields.Where(rf => rf.IsInRoute);
            if (routedFields.Any())
            {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithEmptyRequest_ThenThrowsRestRouteNotFound()
            {
                Assert.Throws<InvalidOperationException>(RestRoutedNotFoundPartialMessage, () =>
                    Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>()));
            }

<#
            }
            else
            {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithEmptyRequest_ThenThrowsBadRequest()
            {
                Assert.Throws<WebServiceException>(HttpErrorCode.BadRequest, () =>
                    Client.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>()));
            }

<#
            }
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>_ThenCreatesResource()
            {
                var result = Client.<#= TextFormatting.TitleCase(verb.VerbType) #><HttpWebResponse>(this.Make<#= verb.RequestContract.ContractName #>());

                Assert.Equal(HttpStatusCode.Created, result.StatusCode);
            }

<#
        }
        else if (verb.VerbType == "PUT")
        {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>_ThenUpdatesResource()
            {
                var created = this.CreateNew<#= serviceNameSingular #>();

                var result = Client.<#= TextFormatting.TitleCase(verb.VerbType) #><HttpWebResponse>(this.Make<#= verb.RequestContract.ContractName #>(new Dictionary<string, string>() { { "<#= identityFieldName #>", created } }));

                Assert.Equal(HttpStatusCode.Accepted, result.StatusCode);
            }

<#
        }
        else if (verb.VerbType == "DELETE")
        {
#>
            [TestMethod, TestCategory("Integration")]
            public virtual void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>_ThenDeletesResource()
            {
                var created = this.CreateNew<#= serviceNameSingular #>();

                var result = Client.<#= TextFormatting.TitleCase(verb.VerbType) #><HttpWebResponse>(this.Make<#= verb.RequestContract.ContractName #>(new Dictionary<string, string>() { { "<#= identityFieldName #>", created } }));

                Assert.Equal(HttpStatusCode.Accepted, result.StatusCode);
            }
<#
        }

    if (verb.IsTestingOnly)
    {
#>
#endif
<#
    }
}
#>

<# 
if (service.Verbs.Any(verb => (verb.VerbType == "GET" && !verb.HasMany) || (verb.VerbType == "PUT") || (verb.VerbType == "DELETE")))
{
#>
            protected virtual string MakeUnknownId()
            {
                return Guid.NewGuid().ToString();
            }

<#
}
if (service.Verbs.Any(verb => (verb.VerbType == "GET") || (verb.VerbType == "PUT") || (verb.VerbType == "DELETE")))
{
#>
            protected virtual string CreateNew<#= serviceNameSingular #>()
            {
                return Client.Post(MakeCreate<#= serviceNameSingular #>()).<#= serviceNameSingular #>.Id;
            }

<#
}
foreach (var verb in service.Verbs)
{
    var isRoutedFieldVerb = ((verb.VerbType == "GET" && !verb.HasMany) || (verb.VerbType == "PUT") || (verb.VerbType == "DELETE"));
    var routedFields = verb.RequestContract.RequestFields.Where(rf => rf.IsInRoute);
    if (isRoutedFieldVerb && routedFields.Any())
    {
#>
            protected virtual <#= verb.RequestContract.ContractName #> Make<#= verb.RequestContract.ContractName #>(Dictionary<string, string> fields)
            {
                return new <#= verb.RequestContract.ContractName #>
                {
                    Id = fields.ContainsKey(Reflection.Reflector<<#= verb.RequestContract.ContractName #>>.GetPropertyName(x => x.Id)) ? fields[Reflection.Reflector<<#= verb.RequestContract.ContractName #>>.GetPropertyName(x => x.Id)] : null,
                };
            }

<#
    }
    else
    {
#>
            protected virtual <#= verb.RequestContract.ContractName #> Make<#= verb.RequestContract.ContractName #>()
            {
                return new <#= verb.RequestContract.ContractName #>();
            }

<#
    }
}
#>
        }
    }
}