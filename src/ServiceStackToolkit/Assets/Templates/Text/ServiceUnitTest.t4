<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="ServiceStackToolkit.Automation" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var service = currentElement.As<IService>();
    var serviceNameSingular = service.ResourceNameSingular;
    var serviceNamePlural = service.ResourceNamePlural;
    var codeRootnamespace = service.Parent.Parent.RootNamespace;
    var testRootnamespace = service.Parent.Parent.Tests.UnitTests.RootNamespace;

    var managerClassName = serviceNamePlural + "Manager";
    var managerMemberName = serviceNamePlural.ToLowerInvariant() + "Manager";
    var commonServicesNamespace = "MySolution.Services";
    var isServiceInCommonNamespace = codeRootnamespace.Equals(commonServicesNamespace, StringComparison.OrdinalIgnoreCase);
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using ServiceStack;
using ServiceStack.Web;
using System;
using <#= codeRootnamespace #>.MessageContracts;
using <#= codeRootnamespace #>.Services;
using <#= codeRootnamespace #>.Workflow;
<#
if (!isServiceInCommonNamespace)
{
#>
using <#= commonServicesNamespace #>.Workflow;
<#
}
#>

namespace <#= testRootnamespace #>.Services
{
    /// <summary>
    /// Tests the <see cref="<#= serviceNamePlural #>"/> service interface class.
    /// </summary>
    /// <remarks>
    /// These tests are verifying basic plumbing, things like:
    /// 1. Rudimentary parameter validation (existence only)
    /// 2. Passing data through to workflow classes.
    /// 3. Handling of exceptions from workflow classes.
    /// 4. Returning correct HTTP response codes.
    /// </remarks>
    public partial class <#= serviceNamePlural #>Spec
    {
        private static readonly IAssertion Assert = new Assertion();

        [TestClass]
        public partial class GivenTheService
        {
            private <#= serviceNamePlural #> service;
            private Mock<I<#= managerClassName #>> <#= managerMemberName #>;

            [TestInitialize]
            public void InitalizeContext()
            {
                this.<#= managerMemberName #> = new Mock<I<#= managerClassName #>>();
                this.service = new <#= serviceNamePlural #>(this.<#= managerMemberName #>.Object);
                this.service.SetupServiceSession();
            }

            [TestMethod, TestCategory("Unit")]
            public void WhenCreateServiceWithNull<#= managerClassName #>_ThenThrows()
            {
                Assert.Throws<ArgumentNullException>(() =>
                    new <#= serviceNamePlural #>(null));
            }

<#
foreach (var verb in service.Verbs)
{
#>
<#
    if (verb.IsTestingOnly)
    {
#>
#if DEBUG
<#
    }
#>
            [TestMethod, TestCategory("Unit")]
            public void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithNullRequest_ThenThrows()
            {
                Assert.Throws<HttpError>("Parameter cannot be null", () =>
                    this.service.<#= TextFormatting.TitleCase(verb.VerbType) #>((<#= verb.RequestContract.ContractName #>)null));
            }

            [TestMethod, TestCategory("Unit")]
            public void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>WithNullManager_ThenThrows()
            {
                this.<#= managerMemberName #>.Setup(man => man.<#= verb.InstanceName #><#= verb.VerbResourceName #>(It.IsAny<IRequest>(), It.IsAny<<#= verb.RequestContract.ContractName #>>()))
                    .Returns((<#= verb.ResponseContract.ContractName #>)null);

                Assert.Throws<HttpError>(HttpErrorCode.InternalServerError, () =>
                    this.service.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>()));
            }

            [TestMethod, TestCategory("Unit")]
            public void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>_ThenManagerReturns<#= serviceNameSingular #>()
            {
                var response = new <#= verb.ResponseContract.ContractName #>();
                this.<#= managerMemberName #>.Setup(man => man.<#= verb.InstanceName #><#= verb.VerbResourceName #>(It.IsAny<IRequest>(), It.IsAny<<#= verb.RequestContract.ContractName #>>()))
                    .Returns(response);

                var result = this.service.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>());

                this.<#= managerMemberName #>.Verify(man => man.<#= verb.InstanceName #><#= verb.VerbResourceName #>(It.IsAny<IRequest>(), It.IsAny<<#= verb.RequestContract.ContractName #>>()), Times.Once());
                Assert.Equal(response, result);
            }

            [TestMethod, TestCategory("Unit")]
            public void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>AndManagerThrowsResourceNotFound_ThenThrowsHttpNotFound()
            {
                this.<#= managerMemberName #>.Setup(man => man.<#= verb.InstanceName #><#= verb.VerbResourceName #>(It.IsAny<IRequest>(), It.IsAny<<#= verb.RequestContract.ContractName #>>()))
                    .Throws(new ResourceNotFoundException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.ResourceNotFound, ()=>
                    this.service.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>()));
            }

            [TestMethod, TestCategory("Unit")]
            public void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>AndManagerThrowsRuleViolation_ThenThrowsHttpBadRequest()
            {
                this.<#= managerMemberName #>.Setup(man => man.<#= verb.InstanceName #><#= verb.VerbResourceName #>(It.IsAny<IRequest>(), It.IsAny<<#= verb.RequestContract.ContractName #>>()))
                    .Throws(new RuleViolationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.BadRequest, ()=>
                    this.service.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>()));
            }

            [TestMethod, TestCategory("Unit")]
            public void When<#= TextFormatting.TitleCase(verb.VerbType) #><#= verb.RequestContract.ContractName #>AndManagerThrowsUnexpected_ThenThrowsHttpInternalServer()
            {
                this.<#= managerMemberName #>.Setup(man => man.<#= verb.InstanceName #><#= verb.VerbResourceName #>(It.IsAny<IRequest>(), It.IsAny<<#= verb.RequestContract.ContractName #>>()))
                    .Throws(new InvalidOperationException(string.Empty));

                Assert.Throws<HttpError>(HttpErrorCode.InternalServerError, ()=>
                    this.service.<#= TextFormatting.TitleCase(verb.VerbType) #>(new <#= verb.RequestContract.ContractName #>()));
            }

<#
    if (verb.IsTestingOnly)
    {
#>
#endif
<#
    }
#>
<#
}
#>
        }
    }
}