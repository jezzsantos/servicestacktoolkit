<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="ServiceStackToolkit.Automation" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var service = currentElement.As<IService>();
    var resource = service.Resource;
    var serviceNameSingular = service.ResourceNameSingular;
    var serviceNamePlural = service.ResourceNamePlural;
    var rootnamespace = service.Parent.Parent.RootNamespace;
    var commonStorageNamespace = "MySolution.Storage";
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using <#= rootnamespace #>.DataContracts;
using <#= commonStorageNamespace #>.Table;

namespace <#= rootnamespace #>.Storage.Table
{
    /// <summary>
    /// An azure storage table definition for an <see cref="<#= serviceNameSingular #>" />
    /// </summary>
    internal partial class <#= serviceNameSingular #>Entity : <#= serviceNameSingular #>EntityBase {}

    internal abstract class <#= serviceNameSingular #>EntityBase : KeyedTableEntity
    {
        /// <summary>
        /// Creates a new instance of the <see cref="<#= serviceNameSingular #>Entity" /> class.
        /// </summary>
        public <#= serviceNameSingular #>EntityBase()
        {
            this.PartitionKey = string.Empty;
            this.RowKey = TableEntityHelper.CreateRowKey();
        }

<#
foreach (var field in resource.ResourceFields)
{
    if (field.IsPersisted)
    {
            var description = ((!string.IsNullOrEmpty(field.Description)) ? field.Description : "the " + field.InstanceName).ToLowerInvariant();
#>
        /// <summary>
        /// Gets or sets <#= description #>
        /// </summary>
        public string <#= field.InstanceName #> { get; set; }

<#
    }
}
#>

        /// <summary>
        /// Gets an entity from the <see cref="I<#= serviceNameSingular #>" />.
        /// </summary>
        public static <#= serviceNameSingular #>Entity FromDto(I<#= serviceNameSingular #> dto)
        {
            Guard.NotNull(() => dto, dto);

            return new <#= serviceNameSingular #>Entity
            {
                Id = TableEntityHelper.SerializeForStorage(dto.Id),
<#
foreach (var field in resource.ResourceFields)
{
    if (field.IsPersisted)
    {
#>
                <#= field.InstanceName #> = TableEntityHelper.SerializeForStorage(dto.<#= field.InstanceName #>),
<#
    }
}
#>
            };
        }

        /// <summary>
        /// Gets the <see cref="I<#= serviceNameSingular #>" /> from the entity.
        /// </summary>
        public virtual I<#= serviceNameSingular #> ToDto()
        {
            var dto = new <#= serviceNameSingular #>
            {
                Id = TableEntityHelper.DeserializeFromStorage(this.Id, string.Empty),
<#
foreach (var field in resource.ResourceFields)
{
    if (field.IsPersisted)
    {
        var defaultValue = GetDefaultValueFromDataType(field.DataType);
#>
                <#= field.InstanceName #> = TableEntityHelper.DeserializeFromStorage(this.<#= field.InstanceName #>, <#= defaultValue #>),
<#
    }
}
#>
            };

            return dto;
        }

        /// <summary>
        /// Merges the properties from the <see cref="entity"/> into this entity
        /// </summary>
        /// <param name="entity">The entity to merge</param>
        public override void Merge(KeyedTableEntity entity)
        {
            Guard.NotNull(() => entity, entity);

            var mergeEntity = entity as <#= serviceNameSingular #>Entity;
            if (mergeEntity == null)
                return;

            var thisDto = this.ToDto();
            var mergeDto = mergeEntity.ToDto();

            // Compare to see if we need to update changed values (null) values are ignored in persistence
<#
foreach (var field in resource.ResourceFields)
{
    if (field.IsPersisted)
    {
        if (IsDataTypeString(field.DataType))
        {
#>
            thisDto.<#= field.InstanceName #> = !string.IsNullOrEmpty(mergeDto.<#= field.InstanceName #>) ? mergeDto.<#= field.InstanceName #> : thisDto.<#= field.InstanceName #>;
<#
        }
        else
        {
#>
            thisDto.<#= field.InstanceName #> = mergeDto.<#= field.InstanceName #>;
<#
        }
    }
}
#>

            //Convert back to entity
            var thisEntity = FromDto(thisDto);
<#
foreach (var field in resource.ResourceFields)
{
    if (field.IsPersisted)
    {
#>
            this.<#= field.InstanceName #> = thisEntity.<#= field.InstanceName #>;
<#
    }
}
#>
        }
    }
}
<#+
public string GetDefaultValueFromDataType(string dataType)
{
    var defaultValue = @"String.Empty";
    if (!IsDataTypeString(dataType))
    {
        if (dataType.StartsWith(@"IEnumerable<"))
        {
            var matches = System.Text.RegularExpressions.Regex.Match(dataType, @"^IEnumerable\<([\w]*)\>$");
            if (matches.Success && matches.Groups.Count > 0)
            {
                defaultValue = string.Format(@"Enumerable.Empty<{0}>()", matches.Groups[1].Captures[0].Value);
            }
            else
            {
                defaultValue = @"null";
            }
        }
        else
        {
            defaultValue = "new " + dataType + "()";
        }
    }

    return defaultValue;
}

public bool IsDataTypeString(string dataType)
{
    return (dataType.Equals("System.String", StringComparison.OrdinalIgnoreCase) 
        && !dataType.Equals("String", StringComparison.OrdinalIgnoreCase));
}
#>