<#@ Template Inherits="NuPattern.Library.ModelElementTextTransformation" HostSpecific="True" Debug="False" #>
<#@ ModelElement Type="NuPattern.Runtime.IProductElement" Processor="ModelElementProcessor" #>
<#@ Assembly Name="NuPattern.Common.dll" #>
<#@ Assembly Name="NuPattern.Runtime.Extensibility.dll" #>
<#@ Import Namespace="NuPattern.Runtime" #>
<#@ Import Namespace="NuPattern.Runtime.ToolkitInterface" #>
<#@ Assembly Name="ServiceStackToolkit.Automation.dll" #>
<#@ Import Namespace="ServiceStackToolkit" #>
<#@ Import Namespace="ServiceStackToolkit.Automation" #>
<#@ Import Namespace="System.Linq" #>
<#@ Output extension=".gen.cs" #>
<#
    var currentElement = (IProductElement)this.Element;
    var service = currentElement.As<IService>();
    var serviceNameSingular = service.ResourceNameSingular;
    var serviceNamePlural = service.ResourceNamePlural;
    var rootnamespace = service.Parent.Parent.RootNamespace;
    var commonStorageNamespace = "MySolution.Storage";
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using <#= rootnamespace #>.DataContracts;
using <#= rootnamespace #>.Storage.Table;
using <#= commonStorageNamespace #>;

namespace <#= rootnamespace #>.Storage
{
    /// <summary>
    /// A storage provider for <see cref="I<#= serviceNameSingular #>"/>
    /// </summary>
    internal partial class <#= serviceNameSingular #>StorageProvider : BaseStorageProvider<I<#= serviceNameSingular #>, <#= serviceNameSingular #>Entity>
    {
        /// <summary>
        /// Converts the <see cref="<#= serviceNameSingular #>Entity"/> to a DTO of <see cref="I<#= serviceNameSingular #>"/>
        /// </summary>
        protected override I<#= serviceNameSingular #> ToDto(<#= serviceNameSingular #>Entity entity)
        {
            return entity.ToDto();
        }

        /// <summary>
        /// Converts the DTO <see cref="I<#= serviceNameSingular #>"/> to a entity of <see cref="<#= serviceNameSingular #>Entity"/>
        /// </summary>
        protected override <#= serviceNameSingular #>Entity FromDto(I<#= serviceNameSingular #> contract)
        {
            return <#= serviceNameSingular #>Entity.FromDto(contract);
        }

        /// <summary>
        /// Creates a new identity for the new entity
        /// </summary>
        protected override string CreateIdentity(<#= serviceNameSingular #>Entity entity)
        {
            return Guid.NewGuid().ToString();
        }
    }
}
